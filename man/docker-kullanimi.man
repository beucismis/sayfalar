.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "DOCKER KULLANIMI"  "" "" ""
.SH NAME
Docker kullanımı \- 
.sp
Bu yazıda sizlere docker kullanımı anlatılacaktır.
.SH DOCKER KURULUMU
.sp
Docker kurmak için debian tabanlı dağıtımlarda \fBdocker.io\fP paketini kurmalısınız.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt install docker.io \-\-no\-install\-recommends
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Eğer debian dışında bir dağıtım kullanıyorsanız kendi sitesi üzerinden indirmeyi veya kaynak koddan derlemeyi deneyebilirsiniz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# docker binarylerini indirmek için https://download.docker.com/linux/static/stable/
# indirdikten sonra arşivden çıkatrıp containerd ve dockerd çalıştıralım. (root kullanarak)
$ tar \-xf docker\-xxx.tgz
$ cd docker
$ export PATH=$PATH:$(pwd) # path içine mevcut dizini de ekledik
# containerd ve dockerd çalıştıralım. Bunlar daemon olduğu için sürekli arkada çalışması gerekmektedir.
$ containerd
$ dockerd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Docker çalışıyor mu diye kontrol etmek için \fBdocker info\fP komutunu kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Docker root kullanıcısı ile çalıştığı için root kullanmadan docker çalışmayacaktır. Bunun için /run/docker.sock dosyamızın aitliğini bir guruba verip kullanıcıyı da o guruba alabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Bu aşama docker gurubu mevcut olmayanlar için geçerlidir.
$ groupadd docker
$ chgrp docker /run/docker.sock # bu işlem her yeniden başlatmada gerekebilir.
# Bu aşama tüm dağıtımlarda gereklidir.
$ usermod \-aG docker username # oturumu kapatıp açmak gerekebilir.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DOCKER ÇALIŞMA MANTIĞI
.sp
Docker linux çekirdeği üzerinde oluşturulmuş \fBcontainer\fP yapısı üzerinde çalışır. Her container kendisine özel ayrılmış alanda kısıtlı kaynaklar ile çalışır. Bu sayede herhangi bir performans kaybı olmadan ana sistemden bağımsız şekilde istenilen uygulamalar çalıştırılabilir.
.sp
Docker containerlarını üretmek için öncelikle imaj gerekmektedir. İmajlara \fBdockerhub\fP üzerinden ulaşabiliriz. Öncelikle imaj kurulur. daha sonra bu imajdan container türetilir. İş bittikten sonra container kolaylıkla yok edilebilir. Veya containerların imajı alınarak yeni imaja dönüştürülebilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
kernel (linux)
  |
system (gentoo)
  |
docker \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  |       |    |     |
alpine debian arch ubuntu
.ft P
.fi
.UNINDENT
.UNINDENT
.SH İMAJLAR
.sp
Docker imajı indirmek için \fBdocker pull\fP komutu kullanılır. \fBname:tag\fP şeklinde belirtilir. eğer tag belirtilmemişse latest olarak değerlendirilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker pull alpine:latest
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Mevcut imajları listelemek için \fBdocker images\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
debian       latest    43d28810c1b4   8 days ago    124MB
alpine       latest    9c6f07244728   6 weeks ago   5\&.54MB
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Burada dikkat edilmesi gereken konu her imajın bir \fBID\fP değeri bulunmasıdır. İmajlar ile ilgili işlemler yapılırken imajın adı veya bu id değeri kullanılır.
.sp
İmaj silmek için \fBdocker rmi\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker rmi alpine
# veya şu da kullanılabilir.
$ docker rmi 9c6f07244728
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
İmajımızı bir dosyaya kaydetmek için \fBdocker save\fP kullanırız.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker save debian:latest \-o /home/backup/debian.tar
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
kaydedilmiş bir dosyadan imaj yüklemek için ise \fBdocker load\fP kullanılız.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker load \-i /home/backup/debian.tar
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
tarball dosyasından docker imajı oluşturmak için \fBdocker import\fP kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker import rootfs.tar custom:new
# veya bir dizinden üretebiliriz
$ tar \-c \-C rootfs . | docker import \- custom:new2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Docker imajını tarball olarak çıkartmak için ise \fBdocker export\fP kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker export debian:stable > /home/user/debian\-stable.tar
# veya şu şekilde de kullanılabilir
$ docker export \-o /home/user/debian\-stable.tar debian:stable
.ft P
.fi
.UNINDENT
.UNINDENT
.SH CONTAINERLAR
.sp
Containerlar içerisinde uygulama çalıştırdığımız alanlardır. imajlardan türetilirler. bir container üretmek için \fBdocker run\fP komutu kullanılır. Bu komut aldığı parametreler ile containerın özelliklerini ayarlar.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#  docker run <seçenekler> <imajın idsi veya ismi> <çalıştırılacak komut>
$ docker run \-it \-d \-p 8000:80 \-\-name deneme 43d28810c1b4 /bin/bash
# \-i stdin okumasına izin verir
# \-d komutu arkada çalıştır
# \-t pseudo\-tty olarak çalıştırır. \-it olarak kullanıp shell çalıştırabiliriz.
# \-p port yönlendirmesi yapar.
# \-\-name container ismi ayarlar. Belirtilmemişse rastgele bir isim alır.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Eğer container çalıştıktan sonra silinmesini istiyorsanız \fB\-\-rm\fP parametresi ekleyebiliriz. Bu sayede işlem bitimi otomatik olarak silinir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker run \-\-rm alpine echo hello world
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
İşlem başlatmayıp sadece container oluşturmak istiyorsanız \fBdocker create\fP kullanabilirsiniz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker create \-\-name deneme2 debian
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Container oluştururkenki seçenekler için \fBdocker run \-\-help\fP veya \fBdocker create \-\-help\fP yapabilirsiniz.
.sp
Çalışan containerları listelemek için \fBdocker ps\fP kullanılır. \fB\-a\fP parametresi eklenirse tüm containerlar listelenir. \fB\-q\fP parametresi ile sadece id değerleri yazdırılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker ps \-a
CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS                     PORTS     NAMES
e1e2983bfa34   debian    \(dqbash\(dq    8 seconds ago    Exited (0) 5 seconds ago             test
b91e04ab5dcc   debian    \(dqbash\(dq    23 seconds ago   Up 22 seconds                        deneme
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Çalışan bir containera bağlanmak için \fBdocker attach\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# ctrl\-k kısayolu ile bağlantı kesilmesi için ek parametre ekleyelim.
$ docker attach b91e04ab5dcc \-\-detach\-keys=\(dqctrl\-k\(dq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Çalışan bir container \fBdocker kill\fP kullanılarak kapatılabilir. kapatılmış bir container docker start kullanılarak tekrar başlatılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker kill b91e04ab5dcc
$ docker ps \-q | grep b91e04ab5dcc # çıktı boşsa container çalışmıyor demektir
$ docker start b91e04ab5dcc
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Container ile işimiz bittiğinde silmek için \fBdocker rm\fP kullanılır. Silme işleminden önce kapatmamız gerekir. Eğer zorla kapatılmasını isterseniz \fB\-f\fP parametresi ekleyebiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker rm b91e04ab5dcc
Error response from daemon: You cannot remove a running container ...
$ docker rm \-f b91e04ab5dcc
# Aşağıdaki komutla tüm containerları silebiliriz.
$ docker rm \-f $(docker ps \-a \-q)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Çalışmayan tüm containerların silinmesi için \fBdocker container prune\fP kullanılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker container prune
WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
Total reclaimed space: 0B
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Çalışan containerlar ile ilgili kullanım istatistiklerine ulaşmak için \fBdocker stats\fP kullanılır. \fBdocker top\fP ise container içinde çalışan süreçler ile ilgili bilgi almaya yarar.
.sp
Container ile ilgili bilgi almak için \fBdocker inspect\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker stats
CONTAINER ID   NAME             CPU %     MEM USAGE / LIMIT   MEM %     NET I/O       BLOCK I/O   PIDS
40f84cb8e4e0   deneme2          0\&.00%     808KiB / 31\&.15GiB   0\&.00%     1\&.87kB / 0B   0B / 0B     1
$ docker top 40f84cb8e4e0
UID            PID              PPID      C                   STIME    TTY            TIME        CMD
root           7432             7396      0                   10:42    pts/0          00:00:00    bash
$ docker inspect 40f84cb8e4e0
\&...
  \(dqId\(dq: \(dq40f84cb8e4e0...\(dq,
  \(dqCreated\(dq: \(dq2022\-09\-21T07:42:18.337126911Z\(dq,
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Çalışan bir container içerisinde bir komut çalıştırmak için \fBdocker exec\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker exec \-it 40f84cb8e4e0 /bin/bash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Containerları duraklatıp devam ettirmek için \fBdocker pause\fP ve \fBdocker unpause\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker pause 40f84cb8e4e0
$ docker unpause 40f84cb8e4e0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Mevcut containerdan imaj elde etmek için \fBdocker commit\fP kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker commit 40f84cb8e4e0 builder:1.0
.ft P
.fi
.UNINDENT
.UNINDENT
.SH UZAK SUNUCUDA ÇALIŞMAK
.sp
\fBDOCKER_HOST\fP çevresel değişkenini ayarlayarak ssh üzerinden uzaktaki bir makinadaki container ve imajları yönetebilirsiniz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ export DOCKER_HOST=ssh://user@server
$ docker info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bağlantı için ssh anahtarınızı sunucuya atmış olmanız gerekmektedir. Bunun için \fBssh\-copy\-id\fP kullanabilirsiniz veya anahtarınızı \fB~/.ssh/authorized_keys\fP içerisine yazmalısınız.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ssh\-copy\-id user@server
user@server\(aqs password:
.ft P
.fi
.UNINDENT
.UNINDENT
.SH VOLUME KAVRAMI
.sp
Docker üzerinde birden çok container ile çalıştığımızı farz edelim. Bu containerlar birbirleri ile dosya alışverişi yapmak isteyebilirler. Örneğin bir tanesi web server olarak çalışırken diğeri web serverda bulunan dosyaları farklı bir amaç için kullanabilir.
.sp
Bu gibi durumlar için \fBvolume\fP bulunur. Volume container tarafından kullanılabilen depolama alanlarıdır. Volume oluşturmak için \fBdocker volume create\fP kullanılır.
.sp
\fBVolume\fP diskte \fB/var/lib/docker/volumes/\fP içerisinde depolanır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker volume create data
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Var olan \fBvolume\fP listesi için \fBdocker volume ls\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker volume ls
DRIVER    VOLUME NAME
local     data
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bir \fBvolume\fP silmek için \fBdocker volume rm\fP kullanılır. Silmeden önce bu alanı kullanan containerları kapatmalısınız.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker volume rm data
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bir container başlatılırken ona volume eklemek için \fB\-\-mount\fP parametresi eklenir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker run \-d \-\-name webserver \-\-mount source=data,target=/var/www/http/ nginx:latest
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bağlanacak dizine yazılmasını istemiyorsak \fBreadonly\fP eklemeliyiz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
docker run \-\-mount source=data,target=/app,readonly test321 alpine
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Container içine bir dizine tmpfs bağlamak için \fBtype\fP belirtilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker run \-\-mount type=tmpfs,target=/app/temp/ \-\-name apptest debian
# Şu şekilde de kullanılabilir.
$ docker run \-\-tmpfs /app/temp/ \-\-name apptest debian
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Ayrıca volume yerine ana sistemdeki bir dizini de bağlayabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
docker run \-\-mount type=bind,source=/home/shared,target=/shared \-\-name test123 alpine
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Dizinleri aşağıdaki gibi de bağlayabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# yazılmasını istemiyorsanız ro istiyorsanız rw
# Hiçbir şey eklemezseniz rw kabul edilir.
docker run \-v /mnt:/mnt:ro \-v /shared:/shared:rw test456 alpine
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DOCKERFILE
.sp
\fBDockerfile\fP docker kullanarak belli işleri gerçekleştirmeye yarayan bir talimat dosyasıdır. Bu talimatların sonucunda yeni bir imaj dosyası oluşturulur. Örneğin aşağıda bir Dockerfile dosyası verilmiştir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
FROM alpine
RUN echo hello world
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bir Dockerfile dosyası aşağıdaki gibi çalıştırılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker build \-f ./builder/Dockerfile ./
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Burada \fB\-f\fP parametresi dosyadan oku anlamına gelir. \fB\&./\fP ise çalışma dizinini belirtir. Eğer \fB\-f\fP verilmemişse çalışma dizininde dockerfile dosyası aranır.
.sp
Ayrıca doğrudan git üzerinden de çalıştırılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker build git://gitserver.com/username/repository.git
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Veya bir tarball indirilerek istenen dockerfile ile çalıştırılması sağlanabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ docker build \-f builder/Dockerfile https://example.org/source.tar.gz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBstdin\fP okunarak çalıştırılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cat Dockerfile | docker build \-
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DOCKERFILE YAPISI
.sp
Dockerfile dosyaları komutlar yardımı ile çalışır. Aşağıda komut ve kullanım şekli belirtilmiştir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
FROM <imaj| scratch>    : hedef imajı kullan veya boş imajla başla
COPY <src> <trgt>       : Çalışma dizinindeki dosyayı kopyalar.
ADD <src> <trgt>        : COPY ile benzerdir fakat arşivleri açarak kopyalar.
RUN <command>           : Komut çalıştırır.
USER <name>             : varsayılan kullanıcı adı belirler
WORKDIR <dir>           : Container içindeki çalışma dizinini belirler.
CMD <command>           : Varsayılan çalıştırılacak olan komutu belirler.
ENV <name> <value>      : Çevresel değişken belirler.
LABEL <key=value>       : Metadata tanımlamak için kullanılır.
EXPOSE <port/protocol>  : Port açmak için kullanılır. protocol kısmı tcp veya udp olabilir.
ARG <name=value>        : ENV ile benzerdir fakat sadece imaj oluşturulurken kullanılabilir.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Örneğin aşağıda bir dockerfile dosyası ile kaynak kod derleyelim.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
FROM alpine
RUN apk add \-\-no\-cache build\-base
ADD bash\-5.0.tar.gz /build
WORKDIR /build/bash\-5.0
RUN ./configure \-\-prefix=/usr
RUN make
RUN make install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Şimdi bu dosyayı derleme yapmak için kullanalım. Burada \fB\-t\fP yeni oluşacak imaja isim tag eklemek için kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ wget https://ftp.gnu.org/gnu/bash/bash\-5.0.tar.gz
$ docker build \-t build\-bash:5.0 .
.ft P
.fi
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
