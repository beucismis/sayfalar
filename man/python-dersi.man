.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "PYTHON DERSI"  "" "" ""
.SH NAME
Python dersi \- 
.sp
Bu yazıda python programlama dilini hızlıca anlatacağım. Bu yazıda karıştırılmaması için girdilerin olduğu satırlar \fI<\-\fP ile çıktıların olduğu satırlar \fI\->\fP ile işaretlenmiştir.
.SH TEMEL BILGILER
.sp
Python programlarının ilk satırında \fB#!/usr/bin/python3\fP satırı bulunmalıdır.
Bir python programını çalıştırmak için Şunları uygulamamız gereklidir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Çalıştırma izni vererek çalıştırabiliriz.
chmod +x dosya.py
\&./dosya.py
# Veya doğrudan çalıştırabiliriz.
python3 dosya.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Python programlama dilinde satır sonuna \fB;\fP koyulmaz.
.sp
Python programlarında işler fonksionlar üzerinden yürür. fonksionların girdileri ve çıktıları bulunur.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cikti = fonksion(girdi1, girdi2)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Pythonda girintileme olayı için de \fB{\fP ve \fB}\fP kullanılmak yerine boşluklandırma kullanılır. Herhangi bir girintilemeye başlanan satırın sonunda \fB:\fP işareti bulunur. Örneğin:
Girintileme için 4 boşluk, 2 boşluk veya tek tab kullanabilirsiniz. Bu yazıda 4 boşluğu tercih edeceğiz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
f = 12 # f sayısını 12ye eşitledik
if f == 12: # f sayısı 12ye eşit mi diye sorguladık
    print("eşit") # ekrana yazı yazdırık
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AÇIKLAMA SATIRLARI
.sp
Python programlama dilinde açıklamalar \fB#\fP işaretinden sonrası için geçerlidir. Örneğin:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#bu bir açıklama satırıdır.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bununla birlikte çoklu açıklama satırı yapmak için \fB"""\fP işareti arasına alabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
""" Bu bir açıklama satırı
Bu diğer açıklama satırı
Bu son açıklama satırı """
.ft P
.fi
.UNINDENT
.UNINDENT
.SH YAZI YAZDIRMA
.sp
Pythonda ekrana yazı yazmak için \fBprint\fP fonksionunu kullanıyoruz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
print("Merhaba Dünya")
\-> Merhaba Dünya
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Birden çok ifadeyi yazdırmak için \fBprint\fP fonksionuna birden çok girdi verebilirsiniz. Bu şekilde aralarına birer boşluk koyarak yazdırır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
print("Merhaba",12,"Dünya",True)
\-> Merhaba 12 Dünya True
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEĞIŞKENLER
.sp
Değişkenler tanımlanırken ** degisken = deger** şeklinde bir ifade kulanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
i = 12
yazi = "merhaba dünya"
k = 1.2
hmm = True
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Değişken adları sayı ile başlayamaz, Türkçe karakter içeremez ve sadece harfler, sayılar ve \fB\-\fP \fB_\fP karakterlerinden oluşur.
.sp
Değişkenler kullanılırken başına herhangi bir işaret almasına gerek yoktur. Örneğin:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
i = 12
print(i)
\-> 12
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Değişkenler tanımlanırken her ne kadar türlerini belirtmesek bile birer türe sahip olarak tanımlanır. Bunlar başlıca \fBinteger\fP, \fBfloat\fP, \fBstring\fP, \fBboolean\fP türleridir.
.sp
Bir değişkenin türünü öğrenmek için \fBtype\fP fonksionunu kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
veri = "abc123"
turu = type(veri)
print(turu)
\-> <class \(aqstr\(aq>
.ft P
.fi
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
