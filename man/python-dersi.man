.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "PYTHON DERSI"  "" "" ""
.SH NAME
Python dersi \- 
.sp
Bu yazıda python programlama dilini hızlıca anlatacağım. Bu yazıda karıştırılmaması için girdilerin olduğu satırlar \fI<\-\fP ile çıktıların olduğu satırlar \fI\->\fP ile işaretlenmiştir.
.SH AÇIKLAMA SATIRLARI
.sp
Python programlama dilinde açıklamalar \fB#\fP işaretinden sonrası için geçerlidir. Örneğin:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#bu bir açıklama satırıdır.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bununla birlikte çoklu açıklama satırı yapmak için \fB"""\fP işareti arasına alabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
""" Bu bir açıklama satırı
Bu diğer açıklama satırı
Bu son açıklama satırı """
.ft P
.fi
.UNINDENT
.UNINDENT
.SH TEMEL BILGILER
.sp
Python programlarının ilk satırında \fB#!/usr/bin/python3\fP satırı bulunmalıdır.
Bir python programını çalıştırmak için Şunları uygulamamız gereklidir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/usr/bin/python3
# Çalıştırma izni vererek çalıştırabiliriz.
chmod +x dosya.py
\&./dosya.py
# Veya doğrudan çalıştırabiliriz.
python3 dosya.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Python programlama dilinde satır sonuna \fB;\fP koyulmaz.
.sp
Python programlarında işler fonksionlar üzerinden yürür. fonksionların girdileri ve çıktıları bulunur.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cikti = fonksion(girdi1, girdi2)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Pythonda girintileme olayı için de \fB{\fP ve \fB}\fP kullanılmak yerine boşluklandırma kullanılır. Herhangi bir girintilemeye başlanan satırın sonunda \fB:\fP işareti bulunur. Örneğin:
Girintileme için 4 boşluk, 2 boşluk veya tek tab kullanabilirsiniz. Bu yazıda 4 boşluğu tercih edeceğiz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
f = 12 # f sayısını 12ye eşitledik
if f == 12: # f sayısı 12ye eşit mi diye sorguladık
    print("eşit") # ekrana yazı yazdırık
.ft P
.fi
.UNINDENT
.UNINDENT
.SH YAZI YAZDIRMA
.sp
Pythonda ekrana yazı yazmak için \fBprint\fP fonksionunu kullanıyoruz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
print("Merhaba Dünya")
\-> Merhaba Dünya
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Birden çok ifadeyi yazdırmak için \fBprint\fP fonksionuna birden çok girdi verebilirsiniz. Bu şekilde aralarına birer boşluk koyarak yazdırır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
print("Merhaba",12,"Dünya",True)
\-> Merhaba 12 Dünya True
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEĞIŞKENLER
.sp
Değişkenler tanımlanırken \fBdegisken = deger\fP şeklinde bir ifade kulanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
i = 12
yazi = "merhaba dünya"
k = 1.2
hmm = True
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Değişken adları sayı ile başlayamaz, Türkçe karakter içeremez ve sadece harfler, sayılar ve \fB\-\fP \fB_\fP karakterlerinden oluşur.
.sp
Değişkenler kullanılırken başına herhangi bir işaret almasına gerek yoktur. Örneğin:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
i = 12
print(i)
\-> 12
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Değişkenler tanımlanırken her ne kadar türlerini belirtmesek bile birer türe sahip olarak tanımlanır. Bunlar başlıca \fBinteger\fP, \fBfloat\fP, \fBstring\fP, \fBboolean\fP türleridir.
.sp
Bir değişkenin türünü öğrenmek için \fBtype\fP fonksionunu kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
veri = "abc123"
turu = type(veri)
print(turu)
\-> <class \(aqstr\(aq>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Boş bir değişken tanımlamak için onun değerine \fBNone\fP atayabiliriz. Bu sayede değişken tanımlanmış fakar değeri atanmamış olur.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
veri = None
tur = type(veri)
print(tur)
\-> <class \(aqNoneType\(aq>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS String
.sp
String türünden değişkenler yazı içerir. \fB"\fP veya \fB\(aq\fP veya \fB"""\fP arasına yazılırarak tanımlanır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
yazi1 = "merhaba"
yazi2 = \(aqyazım\(aq
yazi3 = """dünya"""
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
String türünden değişkenler \fB+\fP işareti ile uc uca eklenebilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
yazi = "merhaba" + \(aq \(aq + """dünya"""
print(yazi)
\-> merhaba dünya
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Değişkeni birden çok kez toplamak için \fB*\fP işareti kullanılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
yazi = "ali"*5
print(yazi)
\-> alialialialiali
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Integer
.sp
Integer türünden değişkenler tam sayı belirtir. Dört işlem işaretleri ile işleme sokulabilirler.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sayi = (((24/2)+4)*2)\-1
"""
24/2 = 12
12+4 = 16
16*2 = 32
32\-1 = 31
"""
print(sayi)
\-> 31
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Integer değişkenlerin kuvvetlerini almak için \fB**\fP kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sayi = 2**3
print(sayi)
\-> 8
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
String türünden bir değişkeni integer haline getirmek için \fBint\fP fonksionu kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
print(int("12")/2)
\-> 6
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Float
.sp
Float türünden değişkenler virgüllü sayılardır. Aynı integer sayılar gibi dört işleme sokulabilirler. İki integer değişkenin birbirine bölümü ile float oluşabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sayi = 1/2 # sayi = 0.5 şeklinde de tanımlanabilir.
print(sayi)
\-> 0.5
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bir float değişkenini integer haline getirmek için \fBint\fP fonksionu kullanılır. Bu dönüşümde virgülden sonraki kısım atılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sayi = 3.2
print(sayi)
sayi2 = int(3.2)
print(sayi2)
\-> 3.2
\-> 3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNot:\fP float ile string çarpılamaz.
.sp
String türünden bir değişkeni float haline getirmek için \fBfloat\fP fonksionu kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
print(float("2.2")/2)
\-> 1.1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Boolean
.sp
Boolean değişkenler sadece \fBTrue\fP veya \fBFalse\fP değerlerini alabilir. Bu değişken daha çok koşullarda ve döngülerde kullanılır. iki değişkenin eşitliği sorgulanarak boolean üretilebilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bool = 12 == 13
"""
== eşit
!= eşit değil
<  küçük
>  büyük
<= küçük eşit
>= büyük eşit
"""
print(bool)
\-> False
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
boolean değişkeninin tersini almak için \fBnot\fP ifadesi kullanılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
veri = not True
print(veri)
\-> False
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Bir string türünden değişkenin içinde başka bir string türünden değişken var mı diye kontrol etmek için \fBin\fP ifadesi kullanılır. Bu ifadenin sonucu boolean üretir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
veri = "ef" in "Dünya"
veri2 = "ny" in "Dünya"
print(veri,veri2)
\-> False True
.ft P
.fi
.UNINDENT
.UNINDENT
.SH KLAVYEDEN DEĞER ALMA
.sp
Python programlarının kullanıcı ile etkileşime girmesi için klavye üzerinden kullanıcıdan değer alması gerekebilir. Bunun için \fBinput\fP fonksionu kullanılır. Bu fonksionun çıkışı string türündendir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
a = input("Bir değer girin >")
print(a,type(a))
<\- 12
\-> 12 <class \(aqstr\(aq>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
String türünden bir ifadeyi bir değişken üretmek için kullanmak istiyorsak \fBeval\fP fonksionunu kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
a = eval("12/2 == 16\-10") # string ifade çalıştırılır ve sonucu aktarılır.
print(a)
\-> True
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNot:\fP Bu fonksion tehlikelidir. Potansiyel güvenlik açığına neden olabilir! Mümkün olduğu kadar kullanmayın :D
.SH KOŞULLAR
.sp
Koşul tanımı yapmak için \fBif\fP ifadesi kullanılır. Koşul sağlanmıyorsa \fBelif\fP ifadesi ile yeni bir koşul tanımlanabilir veya \fBelse\fP ifadesi ile koşulun sağlanmadığı durum tanımlanabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if koşul:
    durum
elif koşul:
    durum
else:
    durum
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Örneğin bir integer değişkenin çift olup olup olmadığını bulalım.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if 13 % 2 == 0 : # % işareti bölümden kalanı bulmaya yarar.
    print("Çift sayı")
else:
    print("Tek sayı")
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Değeri olmayan (None) değişkenler koşul ifadelerinde \fBFalse\fP olarak kabul edilir.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
veri = None
if veri:
    print("Tanımlı")
else:
    print("Tanımsız")
\-> Tanımsız
.ft P
.fi
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
