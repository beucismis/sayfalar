.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "INARY PAKET YAPIMI" "" "" ""
.SH NAME
Inary paket yapımı \- 
.sp
Bu anlatımda inary paketi oluşturma anlatılacaktır. Örnek paket olarak bash paketi üzerinden anlatılacakdır.
.sp
Tüm adımlar root yetkisi gerektirir.
.SH GEREKENLER
.sp
Nosystemd bir dağıtım üzerinde chroot içerisinden çalışan sulin yada kurulu bir sulin gerekmektedir.
.sp
Paket yapmak isteyen kişinin python3 programlama dili bilmesi gerekmektedir.
.sp
Derleme yapacak bilgisayarın yeterince güçlü bir işlemciye sahip olması gereklidir.
.SH DERLEME ORTAMININ HAZIRLANMASI
.sp
İlk olarak inary\-devel kaynaktan derlenecektir. Kaynak kodu git üzerinden çekip kuralım.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
git clone https://gitlab.com/sulinos/inary \-b develop
cd inary
make && make install
.EE
.UNINDENT
.UNINDENT
.sp
Ardından \fBsystem.devel\fP componentini kuralım. Burada temel derleyiciler bulunur.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
inary it \-c system.devel
.EE
.UNINDENT
.UNINDENT
.sp
Derleme işlemleri /var/inary dizini içerisinde gerçekleşecektir. Buraya isterseniz farklı bir disk bağlayabilirsiniz.
Derlemenin hızlı olması ve diske yüklenmemesi için buraya ramdisk bağlamanızı öneririm. Ram miktarının yeteri kadar fazla olduğundan emin olur.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
mkdir /var/inary
mount \-t tmpfs tmpfs /var/inary
.EE
.UNINDENT
.UNINDENT
.SH TASLAK HAZIRLAMA
.sp
\fBinary\-template\fP komutunu kullanarak şablon oluşturalım. İsim ve adres zorunlu parametredir.
Nasıl kullanıldığını öğrenmek için \fIinary\-template \-\-help\fP çalıştırın.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
inary\-template \-n bash \-a \(dqhttps://ftp.gnu.org/gnu/bash/bash\-5.1.8.tar.gz\(dq \-v \(dq5.1.8\(dq
.EE
.UNINDENT
.UNINDENT
.sp
Bize otomatik olarak 3 tane dosya üretti.
.INDENT 0.0
.IP \(bu 2
\fBactions.py\fP dosyası nasıl derleneceğini anlatan dosyadır.
.IP \(bu 2
\fBpspec.xml\fP dosyası paket bilgisinin bulunduğu dosyadır. Inary bu dosyayı kullanır.
.IP \(bu 2
\fBpspec.py\fP dosyası xml üretmek için kullanılabilen ek dosyadır. \fBgenpspec\fP komutu ile xml haline çevirilebilir.
.UNINDENT
.sp
pspec.py formatı inary tarafından kullanılmaz. Bu yüzden bu dosyayı düzenledikten sonra pspec.xml dosyasını güncellemelisiniz. Bu dosyayı kullanmayıp elle pspec.xml dosyasını düzenleyebilirsiniz. SulinOS kaynak depolarında pspec.py formatındaki dosyalar mevcut değildir.
.sp
pspec.xml dosyasını kullanarak pspec.py üretmek için ise \fBrevpspec\fP komutunu kullanmalısınız. Bu komut kısmen kararlı değildir.
.sp
Derlemeye hazır hale gelmiş talimatları \fBinary bi\fP kullanarak dertiriz.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
inary bi
.EE
.UNINDENT
.UNINDENT
.sp
\fBinary\-template\fP ile üretilen pspec.xml veya pspec.py dosyalarını düzenlemek kolay olduğu için içeriği ile ilgili detaylı bilgilere yazının devamında değineceğim. \fBactions.py\fP dosyasının yapısını ve \fBactionsapi\fP kütüphanesini anlatarak devam edelim.
.SS Actions.py dosyası
.sp
Bu dosyada python3 ile yazılır. Sırasıyla \fBsetup build check install\fP fonksionları mevcutsa çalıştırılır. Bu dosyada derleme işlemi yapılırken \fBactionsapi\fP adı verilen inary kaynak kodu ile beraber gelen bir kütüphane kullanılır. Bash derlemek için aşağıdakine benzer bir actions dosyası yazılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
from inary.actionsapi import inarytools
from inary.actionsapi import autotools

def setup():
    autotools\&.configure()

def build():
    autotools\&.make()

def install():
    autotools\&.install()
.EE
.UNINDENT
.UNINDENT
.sp
Actionsapi paket yapma işlemini daha kolay hale getirebilir. Bununla birlikte kullanımı zorunlu değildir. Bu actions dosyamız aşağıdakine benzer şekilde bir komut çalıştırarak derleme yapar.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\&./configure \-\-prefix=/usr # autotools.configure()
make \-j$(nproc) # autotools.make()
make install DESTDIR=/paketleme/dizini # autotools.install()
.EE
.UNINDENT
.UNINDENT
.sp
Actionsapi içerisindeki her aracın birer \fBconfigure\fP, \fBmake\fP ve \fBinstall\fP fonksionu bulunur. kullanım şekilleri de aynıdır. Bu sayede kopyala yapıştır mantığı ile ilerleyerek hızlıca onlarca paket yapabilirsiniz. (Araçtan kasıt: autotools cmaketools mesontools ...)
.sp
Actions ile inary paket sistemi arasında çevresel değişkenler yardımı ile bağlantı kurulur. Bazı önemli çevresel değişkenler ve örnek değerleri aşağıda verilmiştir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
SRCDIR=/tmp/inary/test\-1.0.0\-1/work
SRC_RELEASE=1
OPERATION=setup
INSTALL_DIR=/var/inary/test\-1.0.0\-1/install
PKG_DIR=/var/inary/test\-1.0.0\-1
WORK_DIR=/var/inary/test\-1.0.0\-1/work
SRC_VERSION=1\&.0.0
INARY_BUILD_TYPE=
SRC_NAME=test
.EE
.UNINDENT
.UNINDENT
.sp
Burada \fBWORK_DIR\fP çevresel değişkeni inary tarafından otomatik olarak belirlenir. Bunu değiştirmek için actions betiğinin başına \fBWorkDir=dizinyolu\fP şeklinde belirtmelisiniz. \fBINARY_BUILD_TYPE\fP çevresel değişkeni kullanarak bir paket ile birden çok türde veya yapılandırmada paket üretmek mümkündür. Örneğin Sulin depolarında 32bit kütüphaneleri üretmek için emul32 adında özel bir değer tanımlanır. Inary her tanımlanan build type için tüm fonksionları tekrar çalıştırır. Bu değeri kontrol ederek kodu istediğiniz yönte ayarlayabilirsiniz. Örneğin aşağıda bir paketin 32bit kütüphanesini de derlemek için:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
from inary.actionsapi import inarytools
from inary.actionsapi import autotools
from inary.actionsapi import get

def setup():
    opts = \(dq\-\-prefix=/usr\(dq # parametreler
    if get\&.buildTYPE() == \(dqemul32\(dq: # build type türünü çeker
        shelltools\&.export(\(dqCC\(dq,\(dq{} \-m32\(dq\&.format(get\&.CC())) # derleyiciyi 32bit moduna alır
        shelltools\&.export(\(dqCXX\(dq,\(dq{} \-m32\(dq\&.format(get\&.CXX())) # derleyiciyi 32bit moduna alır
        opts += \(dq \-\-libdir=/usr/lib32\(dq
    autotools\&.rawConfigure(opts)

def build():
    autotools\&.make()

def install():
    autotools\&.install()
    if get\&.buildTYPE() == \(dqemul32\(dq:
        inarytools\&.removeDir(\(dq/usr/bin\(dq) # 32bit derlenmiş olanın çalıştırılabilir dosyasını sil.
.EE
.UNINDENT
.UNINDENT
.sp
Burada önce \fBemul32\fP için çalıştırılır. Sonra tanımlanmamış olan varsayılan tür için çalıştırılır. Yukarıdakö örnekte derleyiciyi 32bit olarak ayarlayıp derleme yaptırdık. daha sonra 32bit olarak derlenen kısımdaki /usr/bin/ dizinini sildik.
.sp
Bu yazıda başlıca actionsapi modüllerini anlatacağım. Tamamına inary kaynak kodundan ulaşabilirsiniz. Kaynak kodda bulunan \fIget_actionsapi_functions\fP betiğini çalıştırınız.
.SH 0. SHELLTOOLS
.sp
Shelltools en önemli modüldür. diğer araçlar shelltools üzerinden çalışmaktadır. Bu sebeple 0. olarak adlandırdım. Buradaki fonksionları guruplandırarak anlatacağım. Diğer araçları ise topluca anlatacağım.
.sp
Dizin değiştirmek için \fBcd\fP dizin içeriği listesi almak için \fBls\fP Komut çalıştırmak için ise \fBsystem\fP fonksionları kullanılır. Çevresel değişken ayarı için ise export kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- cd(directoryName=\(aq\(aq):
\- ls(source):
\- system(command):
\- export(key, value):
.EE
.UNINDENT
.UNINDENT
.sp
Dizin veya dosya isimleri ile ilgili işlemler için aşağıdaki fonksionlar kullanılabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- realPath(filePath):
\- baseName(filePath):
\- dirName(filePath):
.EE
.UNINDENT
.UNINDENT
.sp
Erişim ve varlık kontrolleri aşağıdaki fonksionlar ile yapılır. Bunlar boolean değer döndürür.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- can_access_file(filePath):
\- can_access_directory(destinationDirectory):
\- isLink(filePath):
\- isFile(filePath):
\- isDirectory(filePath):
\- isEmpty(filePath):
.EE
.UNINDENT
.UNINDENT
.sp
Dizin oluşturmak için \fBmakedirs\fP kullanılır. Bu fonksion eğer alt dizinler yoksa onlarla beraber oluşturur. (bir nevi mkdir \-p gibi)
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- makedirs(destinationDirectory):
.EE
.UNINDENT
.UNINDENT
.sp
Dosya işlemleri için aşağıdaki fonksionlar kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- echo(destionationFile, content):
\- chmod(filePath, mode=0o755):
\- chown(filePath, uid=\(aqroot\(aq, gid=\(aqroot\(aq):
\- sym(source, destination):
\- unlink(pattern):
\- unlinkDir(sourceDirectory):
\- move(source, destination):
\- copy(source, destination, sym=True):
\- copytree(source, destination, sym=True):
\- touch(filePath):
.EE
.UNINDENT
.UNINDENT
.SH 1. AUTOTOOLS
.sp
Autotools kütüphanesi \fI\&./configure\fP, \fImake\fP, \fImake install\fP şeklinde derlenen kaynaklar için kullanılır.
.sp
Autotools fonksionları aşağıdaki gibidir:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
inary/actionsapi/autotools.py:
  \- configure(parameters=\(aq\(aq): \&./configure \-\-prefix=/usr \&...
  \- rawConfigure(parameters=\(aq\(aq): prefix olmadan configure
  \- compile(parameters=\(aq\(aq): gcc kullanarak derleme yapar (gcc \&...)
  \- make(parameters=\(aq\(aq): make komutunu çalıştırır
  \- fixInfoDir(): paketleme dizinindeki /usr/share/info/dir dizinini siler
  \- fixpc(): 32bit pkgconfig dosyalarının konumunu düzeltir
  \- install(parameters=\(aq\(aq, argument=\(aqinstall\(aq): make install çalıştırır
  \- rawInstall(parameters=\(aq\(aq, argument=\(aqinstall\(aq): destdir olmadan install
  \- aclocal(parameters=\(aq\(aq): aclocal.m4 dosyalı üretir
  \- autogen(noconfigure=True): bash autogen.sh
  \- autoconf(parameters=\(aq\(aq): autoconf çalıştırır
  \- autoreconf(parameters=\(aq\(aq): autoreconf çalıştırır
  \- automake(parameters=\(aq\(aq): automake çalıştırır
  \- autoheader(parameters=\(aq\(aq): autoheader çalıştırır
.EE
.UNINDENT
.UNINDENT
.SH 2. MESONTOOLS
.sp
Mesontools kütüphanesi \fImeson build\fP, \fIninja \-C build\fP, \fIninja \-C build install\fP şeklinde derlenen kaynaklar için kullanılır.
.sp
Mesontools fonksionları aşağıdaki gibidir:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
inary/actionsapi/mesontools.py:
  \- fixpc(): 32bit pkgconfig dosyalarının konumunu düzeltir
  \- configure(parameters=\(dq\(dq, type=\(dqmeson\(dq): cmake yada meson kullanarak configure işlemi (varsayılan meson)
  \- meson_configure(parameters=\(dq\(dq): meson build
  \- cmake_configure(parameters=\(dq\(dq): mkdir build && cd build && cmake \-G ninja \&..
  \- ninja_build(parameters=\(dq\(dq): ninja \-C build
  \- make(parameters=\(dq\(dq): ninja_build ile aynı
  \- ninja_install(parameters=\(dq\(dq): ninja \-C install
  \- install(parameters=\(dq\(dq):  ninja_install ile aynı
  \- ninja_check(): ninja \-C build check
  \- check(): ninja_check ile aynı
.EE
.UNINDENT
.UNINDENT
.SH 3. CMAKETOOLS
.sp
Cmaketools kütüphanesi \fIcmake ..\fP, \fImake\fP, \fImake install\fP şeklinde derlenen kaynaklar için kullanılır.
.sp
Cmake fonksionları aşağıdaki gibidir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
inary/actionsapi/cmaketools.py:
  \- configure(parameters=\(aq\(aq,installPrefix=\(aq\(aq, sourceDir=\(aq.\(aq): cmake kullanarak configure işlemi
  \- make(parameters=\(aq\(aq): make çalıştırır
  \- fixInfoDir(): paketleme dizinindeki /usr/share/info/dir dizinini siler
  \- install(parameters=\(aq\(aq, argument=\(aqinstall\(aq): make install çalıştırır
  \- rawInstall(parameters=\(aq\(aq, argument=\(aqinstall\(aq): destdir olmadan make install
.EE
.UNINDENT
.UNINDENT
.SH 4. INARYTOOLS
.sp
Inarytools kütüphanesi derleme işlemine yardımcı olan bir araçtır. Dosya işlemleri ve bazı uzun kodları kısatlma amaçlı yapılmıştır.
.sp
Destination konumlarını tanımlarken paket içeriğindeki yollarını yazmamız yeterlidir.
.sp
Inarytools fonksionları aşağıdaki gibidir. Bunların kullanımı ve örneklerini kaynak koddan bulabilirsiniz.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- executable_insinto(destinationDirectory, *sourceFiles):
\- readable_insinto(destinationDirectory, *sourceFiles):
\- lib_insinto(sourceFile, destinationDirectory, permission=644):
\- dobin(sourceFile, destinationDirectory=\(aq/usr/bin\(aq):
\- dopixmaps(sourceFile, destinationDirectory=\(aq/usr/share/pixmaps\(aq):
\- dodir(destinationDirectory):
\- dodoc(*sourceFiles, **kw):
\- dohtml(*sourceFiles, **kw):
\- doinfo(*sourceFiles):
\- dolib(sourceFile, destinationDirectory=\(aq/usr/lib\(aq, mode=755):
\- doman(*sourceFiles, pageDirectory=None):
\- domo(sourceFile, locale, destinationFile,
\- domove(sourceFile, destination, destinationFile=\(aq\(aq):
\- rename(sourceFile, destinationFile):
\- dosed(sources, findPattern, replacePattern=\(aq\(aq, deleteLine=False, level=\-1):
\- dosbin(sourceFile, destinationDirectory=\(aq/usr/sbin\(aq):
\- dosym(sourceFile, destinationFile):
\- insinto(destinationDirectory, sourceFile, destinationFile=\(aq\(aq, sym=True):
\- newdoc(sourceFile, destinationFile):
\- newman(sourceFile, destinationFile):
\- remove(sourceFile):
\- removeDir(destinationDirectory):
.EE
.UNINDENT
.UNINDENT
.SH 5. GET
.sp
Get kütüphanesi ile derlemeye ait bazı değişkenlere ulaşmak mümkündür. get fonksionları parametre almaz ve string türünden değer döndürür.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
\- curDIR():         \- docDIR():            \- srcVERSION():     \- qtDIR():
\- curKERNEL():      \- sbinDIR():           \- srcRELEASE():     \- existBinary(bin):
\- curPYTHON():      \- infoDIR():           \- srcTAG():         \- getBinutilsInfo(util):
\- curPERL():        \- manDIR():            \- srcDIR():         \- AR():
\- ENV(environ):     \- dataDIR():           \- ARCH():           \- AS():
\- pkgDIR():         \- confDIR():           \- HOST():           \- CC():
\- workDIR():        \- localstateDIR():     \- CHOST():          \- CXX():
\- operation():      \- libexecDIR():        \- CFLAGS():         \- LD():
\- installDIR():     \- libDIR():            \- CXXFLAGS():       \- NM():
\- lsbINFO():        \- defaultprefixDIR():  \- LDFLAGS():        \- RANLIB():
\- kernelVERSION():  \- emul32prefixDIR():   \- makeJOBS():       \- F77():
\- srcNAME():        \- kdeDIR():            \- buildTYPE():      \- GCJ():
.EE
.UNINDENT
.UNINDENT
.SS Pspec.xml dosyası
.sp
Anlatımımıza pspec.xml ile devam edeceğim. Bu dosya inary tarafından okunarak gereken değerler alınarak derleme işlemi yapılır. \fBSource\fP, \fBPackage\fP ve \fBHistory\fP olmak üzere 3 bölümden oluşur.
.sp
Örneğin aşağıda örnek pspec dosyası verilmiştir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
<?xml version=\(dq1.0\(dq ?>
<!DOCTYPE INARY SYSTEM \(dqhttps://raw.githubusercontent.com/Zaryob/inary/master/inary\-spec.dtd\(dq>
<INARY>
    <Source>
        \&... <!\-\-Burası source bölümüdür.\-\->
    </Source>

    <Package>
        \&... <!\-\-Burası package bölümüdür.\-\->
    </Package>

    <Package>
        \&... <!\-\-Burası diğer package bölümüdür.\-\->
    </Package>

    <History>
        \&... <!\-\-Burası history bölümüdür.\-\->
    </History>
</INARY>
.EE
.UNINDENT
.UNINDENT
.SH SOURCE BÖLÜMÜ
.sp
Bu bölümde kaynağın özellikleri belirtilir. \fBName\fP, \fBHomepage\fP, \fB*Packager\fP, \fBSummary\fP, \fBDescription\fP, \fBArchive\fP kısımları zorunludur.
.sp
\fBArchive\fP kısmı birden fazla olabilir.
.sp
Archive türü ikili dosyaysa veya açılmayacaksa \fBtype=\(dqbinary\(dq\fP eklemeniz gerekmektedir. (\fI<Archive sha1sum=\(dq...\(dq type=\(dqarchive\(dq>https://.../file.bin</Archive>\fP)
.sp
\fBBuildDependency\fP kısmında yazılan paketler derleme öncesi kurulur. Oluşturulan paketlere bağımlılık olarak eklenmez.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
<Source>
       <Name>bash</Name>
       <Homepage>https://www.gnu.org/software/bash</Homepage>
       <Packager>
            <Name>Ali Rıza KESKİN</Name>
            <Email>paledega@yandex.ru</Email>
       </Packager>
       <License>GPLv2</License>
       <IsA>app:console</IsA>
       <!\-\-<Rfp>Bu paket deneyseldir</Rfp>\-\->
       <PartOf>system.base</PartOf>
       <Summary>Bourne\-Again shell</Summary>
       <Description>GNU bash shell</Description>
       <Archive sha1sum=\(dqd116b469b9e6ea5264a74661d3a4c797da7f997b\(dq>https://ftp.gnu.org/gnu/bash/bash\-5.0.tar.gz</Archive>
       <BuildDependencies>
           <Dependency>ncurses\-devel</Dependency>
           <Dependency>readline\-devel</Dependency>
       </BuildDependencies>
   </Source>
.EE
.UNINDENT
.UNINDENT
.sp
Eğer \fBRfp\fP tagı kullanırsanız paket \fBRfp\fP olarak oluşturulur. Bu paketler kararlı olmayan veya deneysel paketlerdir. Derlenirken ve kurulurken onay ister. Onay mesajını bu tagın arasına yazmalısınız. \fBRfp\fP paketler Sulin deposunda bulunmaz.
.SH PACKAGE BÖLÜMÜ
.sp
Bu bölüm birden çok kez bulunabilir. Paket oluşturulurken kullanılır. \fBName\fP, \fBFiles\fP kısımları zorunludur.
.sp
\fBFile\fP kısmında en az 1 tane \fBPath\fP bulunmalıdır ve \fBfileType\fP değeri belirtilmek zorundadır. Bu değer \fBconfig\fP, \fBexecutable\fP, \fBlibrary\fP, \fBheader\fP, \fBlocaledata\fP, \fBdata\fP, \fBinfo\fP alabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
<Package>
       <Name>bash</Name>
       <IsA>postOps</IsA>
       <IsA>app:console</IsA>
       <RuntimeDependencies>
           <Dependency>ncurses</Dependency>
       </RuntimeDependencies>
       <Files>
           <Path fileType=\(dqconfig\(dq>/etc</Path>
           <Path fileType=\(dqexecutable\(dq>/bin</Path>
           <Path fileType=\(dqexecutable\(dq>/usr/bin</Path>
           <Path fileType=\(dqinfo\(dq>/usr/share/info</Path>
           <Path fileType=\(dqheader\(dq>/usr/include</Path>
           <Path fileType=\(dqlibrary\(dq>/usr/lib/</Path>
           <Path fileType=\(dqlocaledata\(dq>/usr/share/locale</Path>
       </Files>
   </Package>
.EE
.UNINDENT
.UNINDENT
.sp
\fBRuntimeDependencies\fP kısmında yazılan paketler paketlere bağımlılık olarak eklenir. Derleme öncesi kurulacak listesine eklenmez.
.sp
\fBfileType\fP türüne \fBconfig\fP verirseniz o dizindeki dosyaları ayar dosyası olarak ekler. Paket güncelleme esnasında configleri kullanıcılar isterse güncellemeyebilir.
.sp
\fBIsA\fP değerini \fBpostOps\fP ayarlarsanız paketin içine \fBpostoperations.py\fP dosyası eklenir. Bu dosya kurulum aşamasında çalıştırılacak betik dosyasıdır.
.SH HISTORY BÖLÜMÜ
.sp
Bu bölümde paket geçmişi bulunur. Dernenen paket sürümü en güncel olanın sürümü olarak alınır. \fBUpdate\fP kısmı birden çok kez bulunabilir ve en az 1 tane bulunmalıdır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
<History>
    <Update release=\(dq1\(dq>
           <Date>2019\-01\-17</Date>
           <Version>5.0</Version>
           <Comment>First release</Comment>
           <Name>Ali Rıza KESKİN</Name>
           <Email>paledega@yandex.ru</Email>
    </Update>
</History>
.EE
.UNINDENT
.UNINDENT
.SS Pspec.py dosyası
.sp
Bu dosya doğrudan kullanılmaz. Bu dosyayı \fBpspec.xml\fP üretmek için kullanırız. Bu dosyanın bulunduğu dizinde \fBgenpspec\fP komutunu çalıştırarak \fBpspec.xml\fP dosyasını üretebilirsiniz.
Bu dosya bir olarak python sınıfıdır. Ve alt sınıflardan oluşur.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
class inary:
    class source:
        # Source bölümü
    class pkg_bash:
        # Package bölümü
    class history:
        # History bölümü
.EE
.UNINDENT
.UNINDENT
.SH SOURCE BÖLÜMÜ
.sp
Bu bölümde kaynağın özellikleri belirtilir. \fBpackages\fP dizisindeki elemanların adına sahip olan sınıflar \fBpspec.xml\fP oluşturulurken kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
class source:
    name = \(dqbash\(dq
    homepage = \(dqhttp://cnswww.cns.cwru.edu/~chet/bash/bashtop.html\(dq
    class packager:
        name = \(dqSüleyman POYRAZ\(dq
        email = \(dqzaryob.dev@gmail.com\(dq
    license = [\(aqGPLv2\(aq]
    isa = [\(aqapp:console\(aq]
    partof = \(dqsystem.base\(dq
    summary = \(dqBourne\-Again shell\(dq
    description = \(dqGNU bash shell\(dq
    archive = [
        (\(dq6399bd1f9ef4dd0d901c7b76737bc409de73c77a\(dq,\(dqhttps://ftp.gnu.org/gnu/bash/bash\-5.1.8.tar.gz\(dq),
    ]
    builddependencies = [\(aqncurses\-devel\(aq, \(aqreadline\-devel\(aq]
    packages = [\(aqpkg_bash\(aq, \(aqpkg_bash_devel\(aq, \(aqpkg_bash_docs\(aq, \(aqpkg_bash_pages\(aq]
.EE
.UNINDENT
.UNINDENT
.SH PACKAGE BÖLÜMÜ
.sp
Bu bölümde paket özellikleri yer alır. Bu bölümün sınıf adını \fBSource\fP bölümündeki \fBpackages\fP dizisi içine eklediğinizde buradaki değerler kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
class pkg_bash
    name = \(dqbash\(dq
    runtimedependencies = [\(dqncurses\(dq]
    files = [
        (\(dqconfig\(dq,\(dq/etc\(dq),
        (\(dqexecutable\(dq,\(dq/bin\(dq),
        (\(dqinfo\(dq,\(dq/usr/share/info\(dq),
        (\(dqlibrary\(dq,\(dq/lib\(dq),
        (\(dqlocaledata\(dq,\(dq/usr/share/locale\(dq),
    ]
.EE
.UNINDENT
.UNINDENT
.SH HISTORY BÖLÜMÜ
.sp
Bu bölümde paket geçmişi bulunur. Release bilgisi yer almaz. Bunun yerine release bilgisi otomatik olarak hesaplanır. \fBupdate\fP dizisine dizi halinde eklenir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
class history:
    update = [
        [\(dq2021\-08\-29\(dq,\(dq5.1.8\(dq,\(dqFirst release\(dq,\(dqSüleyman POYRAZ\(dq,\(dqzaryob.dev@gmail.com\(dq],
    ]
.EE
.UNINDENT
.UNINDENT
.SS Postoperations.py dosyası
.sp
Bu dosya basitçe bir python betiğidir ve 4 temel fonksiondan oluşur. Bunlar \fBpostInstall\fP, \fBpreInstall\fP, \fBpostRemove\fP, \fBpreRemove\fP şeklindedir. Bu fonksionlar argument almazlar.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
def postInstall(): # paket kurulduktan sonra çalıştırılır.
def postRemove(): # paket silindikten sonra çalıştırılır.
def preInstall(): # paket kurulmadan önce çalıştırılır.
def preRemove(): # paket silinmeden önce çalıştırılır.
.EE
.UNINDENT
.UNINDENT
.sp
Bu dosyada bununan \fBpostInstall\fP fonksionu aynı zamanda paketler yeniden yapılandırılmaya çalışılırken de çalıştırılır. Bu betiklerde actionsapi kullanımı ile ilgili herhangi bir kısıtlama bulunmamasına karşın kullanımı tavsiye edilmemektedir.
.sp
Inary komutu her çalıştırıldığında işlem bitiminde sysconf modülü tetiklenir. Bu modül dosya sistemindeki değişiklikleri baz alarak çalışır ve önbellek dosyalarını güncelleme gibi bazı işleri otomatik olarak yerine getirir. Bu sebeple postoperations betiklerine nadiren ihtiyaç duyulur.
.\" Generated by docutils manpage writer.
.
