.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "MAKEFILE DERSI" "" "" ""
.SH NAME
makefile dersi \- 
.sp
makefile formatı yazılan bir kaynak kodu derlemek ve yüklemek için kullanılan ne yaygın derleme talimatı formatlarından biridir.
.sp
Bu yazıda sizlere makefile dosyası nasıl yazılır anlatacağım.
.SH GENEL BAKIŞ
.sp
Örneğin aşağıdaki gibi bir \fBC\fP kodumuz olsun
.INDENT 0.0
.INDENT 3.5
.sp
.EX
#include <stdio.h>
int main(){
    puts(\(dqHello world!\en\(dq);
    return 0;
}
.EE
.UNINDENT
.UNINDENT
.sp
Bunu aşağıdaki komutu kulanarak derleriz ve kurarız.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ gcc \-o hello hello\&.c
$ install hello /usr/bin/hello
.EE
.UNINDENT
.UNINDENT
.sp
Makefile dosyalarının bölüm tanımlamalarında girintileme amaçlı \fBTab\fP kullanılır.
.sp
Şimdi aşağıdaki makefile dosyasını inceleyelim.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
PREFIX=/usr
build:
        $(CC) \-o hello hello.c

install:
        install hello $(DESTDIR)/$(PREFIX)/bin/hello
.EE
.UNINDENT
.UNINDENT
.sp
Burada \fBPREFIX\fP, \fBCC\fP, \fBDESTDIR\fP gibi parametreler değişkendir. Bu değişkenler derleme esnasında değiştirilebilir.
.sp
Bu makefile dosyasını kullanarak derlemeyi ve yüklemeyi aşağıdaki gibi yaparız.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ make
$ make install
.EE
.UNINDENT
.UNINDENT
.sp
Görüldüğü gibi derleme ve yükleme işlemi daha kolay ve nasıl derleneceğini basitçe belirtmiş olduk.
.sp
Burada kullandığımız değişkenler şu şekilde açılnabilir.
.INDENT 0.0
.IP \(bu 2
PREFIX = /usr olarak tanımladık.
.IP \(bu 2
DESTDIR = paket sistemleri paket yaparken bu değişkeni otomatik olarak değiştirir. Kurulacak kök dizin konumudur.
.IP \(bu 2
CC = derleyicinin adıdır. Bu değişkeni ayarlayarak derleyiciyi değiştirebilirsiniz.
.UNINDENT
.sp
Make komutuna eğer hiç parametre verimezsek ilk baştaki bölümü çalıştırır. Biz ilk başta \fBbuild\fP tanımladığımız için make komutu build çalıştırır. make komutuna parametre olarak bölüm verirsek o bölüm çalıştırılır.
.SH DEĞIŞKEN IŞLEMLERI
.sp
Değişken tanımlamak için \fBvariable=value\fP şeklinde tanımlanabilir. değişkeni kullanırken de \fB$()\fP işareti arasına alınır. Örneğin:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
yazi=hello world
hello:
        echo $(yazi)
.EE
.UNINDENT
.UNINDENT
.sp
Bu değişkeni \fBmake yazi=deneme123\fP şeklinde komut vererek değiştirebiliriz.
.sp
Var olan bir değişkene ekleme yapmak için \fB+=\fP ifadesi kullanılır.  \fB:=\fP ifadesi eğer tanımlama varsa ekleme yapar. \fB?=\fP sadece daha önceden tanımlanmışsa ekleme yapar.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
yazi=hello
yazi+=world
sayi:=$(shell ls)
hello:
        echo $(yazi)
.EE
.UNINDENT
.UNINDENT
.sp
Eğer \fB$\fP işareti kullanmanız gereken bir durum oluşursa \fB$$\fP ifadesi kullanabilirsiniz. Örneğin:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
hello:
        bash \-c \(dqecho $$HOME\(dq
.EE
.UNINDENT
.UNINDENT
.SH BÖLÜMLER
.sp
Makefile yazarken bölümler tanımlanır ve eğer bölümün adı belirtilmemişse ilk bölüm çalıştırılır. Bölümler arası bağımlılık vermek için aşağıdaki gibi bir kullanım yapılmalıdır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
yazi: sayi test
        echo \(dqHello world\(dq
sayi:
        echo 12
test:
        echo test123
.EE
.UNINDENT
.UNINDENT
.sp
Yukarıdaki dosyayı çalıştırdığımızda sırasıyla \fBsayi\fP \-> \fBtest\fP \-> \fByazi\fP bölümleri çalıştırılır.
.sp
Aynı işi yapan birden çok bölüm şu şekilde tanımlanabilir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
bol1 bol2:
        echo Merhaba
# Şuna eşittir.
bol1:
        echo Merhaba
bol2:
        echo Merhaba
.EE
.UNINDENT
.UNINDENT
.sp
Bölümün adını \fB$@\fP kullanarak öğrenebiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
bolum:
        echo $@
.EE
.UNINDENT
.UNINDENT
.sp
Bölümün tüm bağımlılıklarını almak için için \fB$^\fP kullanabiliriz.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
bolum: bol1 bol2
        echo $^
bol1 bol2:
        true
.EE
.UNINDENT
.UNINDENT
.sp
\fB$?\fP ifadesi \fB$^\fP ile benzerdir fakat sadece geçerli bölümden sonra tanımlanan bölümleri döndürür.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
bol1:
        true
bolum: bol1 bol2
        echo $?
bol2:
        true
.EE
.UNINDENT
.UNINDENT
.sp
\fB$<\fP ifadesi sadece ilk bağımlılığı almak için kullanılır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
bol1 bol2:
        true
bolum: bol1 bol2
        echo $<
.EE
.UNINDENT
.UNINDENT
.sp
Eğer \fBxxxx.o\fP şeklinde bir kural tanımlarsanız bu kural çalıştırıldıktan sonra gcc ile kural adındaki dosya derlenir.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
main: main\&.o
main.o: main\&.c test\&.c

main.c:
        echo \(dqint main(){}\(dq > main.c
%.c:
        touch $@
.EE
.UNINDENT
.UNINDENT
.sp
Burada main.c dosyası var olmayan bir dosyadır ve derleme esnasında oluşturulur. test.c dosyası ise daha önceden var olan bir dosyadır ve o dosyaya bir şey yapılmaz. main.c kuralı sadece main.c için çalıştırılırken \fB%.c\fP şeklinde belirtilen kular hem main.c hem test.c için çalıştırılır.
\fBmain\fP ile belirttiğimiz kuralda main.o bağımlılığı olduğu için bi derlemenin sonucu olarak main adında bir derlenmiş dosya üretilmektedir.
.SH WILDCARD VE SHELL
.sp
Wildcard ifadesi eşleşen dosyaları döndürür.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
files := $(wildcard *.c)
main:
        gcc \-o main $(files)
.EE
.UNINDENT
.UNINDENT
.sp
Shell ifadesi ise komut çalıştırarak sonucunu döndürür.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
files := $(shell find \-type f \-iname \(dq*.c\(dq)
main:
        gcc \-o main $(files)
.EE
.UNINDENT
.UNINDENT
.SH BIRDEN ÇOK DOSYA ILE ÇALIŞMA
.sp
\fBmake \-C xxx\fP şeklinde alt dizindeki bir makefile dosyasını çalıştırabilirsiniz.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
build:
        make \-C src
.EE
.UNINDENT
.UNINDENT
.sp
Ayrıca \fBinclude\fP kullanarak başka bir dosyada bulunan kuralları kullanabilirsiniz.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
# Makefile dosyası
include build.mk
build: main
        gcc main.c \-o main
# build.mk dosyası
main:
        echo \(dqint main(){return 0;}\(dq > main.c
.EE
.UNINDENT
.UNINDENT
.SH KOŞULLAR
.sp
\fBifeq\fP ifadesi ile koşul tanımlanabilir.  aşağıdaki ifadeşi \fBmake CC=clang\fP şeklinde çalıştırırkanız clang yazdırır, parametresiz bir şekilde çalıştırırsanız gcc yazdırır. Burada dikkat edilmesi gereken konu \fBifeq\fP, \fBelse\fP, \fBendif\fP girintilenmeden yazılır.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
build:
ifeq ($(CC),clang)
        echo \(dqclang\(dq
else
        echo \(dqgcc\(dq
endif
.EE
.UNINDENT
.UNINDENT
.SH KOMUT ÖZELLIK IFADELERI
.sp
Eğer komutun başına \fB@\fP işareti koyarsanız komut ekrana yazılmadan çalıştırılır. \fB\-\fP yazarsanız komut hata alsa bile geri kalan kısımlar çalışmaya devam eder.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
build:
        @echo \(dqMerhaba dünya\(dq
        \-gcc main.c \-o main
.EE
.UNINDENT
.UNINDENT
.SH WHILE VE FOR KULLANIMI
.sp
Bash betiklerinde kullandığımız for ve while yapısı makefile yazarken aşağıdaki gibi kullanılabilir. done dışındaki satırların sonuna \fB\e\fP işareti eklenir, do dışındaki satırların sonuna da \fB;\fP işareti koyulur.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
build:
        @for sayi in 1 2 3 $(dizi) ; do \e
            echo $$sayi ; \e
            echo \(dqdiger satir\(dq ; \e
        done
.EE
.UNINDENT
.UNINDENT
.SH SHELL DEĞIŞKENI
.sp
\fBSHELL\fP değişkeni makefile altındaki komutların hangi shell kullanılarak çalıştırılacağını belirtir. Varsayılan değeri \fB/bin/sh\fP olarak belirlenmiştir. Örneğin debian tabanlı dağıtımlarda /bin/sh konumu /bin/dash bağlıyken archlinuxta /bin/bash bağlıdır. \fBdash\fP \fB[[\fP kullanımını desteklemezken \fBbash\fP destekler. Bu sebeple uyumluluğu arttırmak için \fBSHELL\fP değişkenini zorla /bin/bash olarak değiştirebiliriz. Aşağıdaki örnekle konuyu daha iyi anlamak için SHELL değişkenini python3 ayarladık ve python kodu yazdık.
.INDENT 0.0
.INDENT 3.5
.sp
.EX
SHELL=/usr/bin/python3
build:
        import os ;\e
        liste = os.listdir(\(dq/\(dq) ;\e
        print(liste[0])
.EE
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
